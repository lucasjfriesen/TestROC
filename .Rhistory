jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
plot()
print()
eval(print("x"))
eval(print())
eval(print(x))
eval(print)
eval(base::print)
eval("base::print")
parse("base::print")
eval(parse("base::print"))
eval(parse("base::print("c")"))
eval(parse("base::print('c')"))
eval(parse("base::print('x')"))
eval(parse("5+5"))
eval(parse(text = "5+5"))
eval(parse(text = "base::print('x')"))
y = eval(parse(text = "base::print('x')"))
y
jmvtools::install()
?cutpointR
??cutpointR
?cutpointr::cutpointr()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
c
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
library(haven)
data <- read_sav("files/Gail Sensitivity Data.sav")
View(data)
results <- cutpointr::cutpointr(data$bditot, data$scidmdd)
results <- cutpointr::cutpointr(data$bditot, data$scidmdd, na.rm = TRUE)
View(results)
results$ppv
sum <- summary(results)
sum$confusion_matrix
summary(results)
results
results
jmvtools::install()
results$optimal_cutpoint
list(
scaleName = self$options$dependentVar,
cutpoint = results$optimal_cutpoint,
sensitivity = results$sensitivity,
specificity = results$specificity,
AUC = results$AUC)
list(
cutpoint = results$optimal_cutpoint,
sensitivity = results$sensitivity,
specificity = results$specificity,
AUC = results$AUC)
length(results)
nrow(reuslts)
nrow(results)
jmvtools::install()
x <- list(results1 = results, results2 = results)
nrow(x)
jmvtools::install()
results <- list(results)
results
length(results)
jmvtools::install()
jmvtools::install()
x[[1]]
x[1]
x[1]$results1
for (row in x){print(row())}
for (row in x){print(row}
for (row in x){print(row}}
for (row in x){print(row)}
names(results)
results
names(x)
results[["results1"]]
results["results1"
]
x[["results1"]]
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
names(results) <- "b"
results
names(results)[1] <- "b"
results
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
x <- list (1,2,3,NaN,5)
is.integer(x)
lapply(x, is.integer)
apply(x, is.integer)
x[is.integer(x)]
x
x = c(1,2,3,4)
x
x = c(1,2,3,4, NaN, 5)
x[is.integer(x)]
is.integer(x)
lapply(x, is.integer)
x
is.numeric(x)
is.nan(x)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
results
summary(results)
library(cutpointr)
summary(results)
summary.cutpointr(results)
plot(results)
results
results <- cutpointr(data$bditot, data$scidmdd)
results <- cutpointr(data$bditot, data$scidmdd, na.rm = T)
summary(results)
names(results)
res <- list(results)
res
summary(res)
jmvtools::install()
summary$results
summary(results)
y = summary(results)
y
y$confusion_matrix
y$confusion_matrix[[1]]
y$confusion_matrix[[1]][2:5]
jmvtools::install()
jmvtools::install()
summary(results[[1]])
results
summary(results)
x
x <- list(a = results, b = results)
summary(x[["a"]])
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
summary(results)
functio <- <- function(object, ...) {
x_summary <- vector("list", nrow(object))
names(x_summary) <- suppressWarnings(object$subgroup)
for (r in 1:nrow(object)) {
temprow <- object[r, ]
if (has_column(object, "subgroup")) {
x_summary[[r]]$subgroup <- temprow$subgroup
}
x_summary[[r]]$cutpointr <- temprow
x_summary[[r]]$desc <- temprow$data[[1]] %>%
dplyr::select_(as.name(temprow$predictor)) %>%
unlist %>%
summary_sd
x_summary[[r]]$desc_byclass <-
split(temprow$data[[1]], temprow$data[[1]][, temprow$outcome]) %>%
purrr::map(function(x) {
dat <- x[, temprow$predictor]
dat <- unlist(dat)
summary_sd(dat)
})
x_summary[[r]]$desc_byclass <- data.frame(do.call(rbind, x_summary[[r]]$desc_byclass))
colnames(x_summary[[r]]$desc_byclass) <- c("Min.", "5%", "1st Qu.", "Median",
"Mean", "3rd Qu.", "95%", "Max", "SD")
x_summary[[r]]$n_obs <- nrow(temprow$data[[1]])
x_summary[[r]]$n_pos <- temprow$data[[1]] %>%
dplyr::select_(as.name(temprow$outcome)) %>%
unlist %>% (function(x) sum(x == temprow$pos_class))
x_summary[[r]]$n_neg <- x_summary[[r]]$n_obs - x_summary[[r]]$n_pos
# Confusion Matrix
oi <- get_opt_ind(temprow$roc_curve[[1]],
oc = unlist(temprow$optimal_cutpoint),
direction = temprow$direction)
x_summary[[r]]$confusion_matrix <- data.frame(
cutpoint = unlist(temprow$optimal_cutpoint),
temprow$roc_curve[[1]][oi, c("tp", "fn", "fp", "tn")]
)
if (has_boot_results(temprow)) {
x_summary[[r]][["boot"]] <- purrr::map(temprow[["boot"]][[1]][, 1:13], function(x) {
round(summary_sd(x), 4)
})
x_summary[[r]][["boot"]] <- do.call(rbind, x_summary[[r]][["boot"]])
x_summary[[r]][["boot"]] <- as.data.frame(x_summary[[r]][["boot"]])
x_summary[[r]][["boot"]] <- tibble::rownames_to_column(x_summary[[r]][["boot"]],
var = "Variable")
x_summary[[r]]$boot_runs <- nrow(temprow[["boot"]][[1]])
}
}
x_summary <- purrr::map_df(x_summary, tidy_summary)
class(x_summary) <- c("summary_cutpointr", class(x_summary))
return(x_summary)
}
functio <- function(object, ...) {
x_summary <- vector("list", nrow(object))
names(x_summary) <- suppressWarnings(object$subgroup)
for (r in 1:nrow(object)) {
temprow <- object[r, ]
if (has_column(object, "subgroup")) {
x_summary[[r]]$subgroup <- temprow$subgroup
}
x_summary[[r]]$cutpointr <- temprow
x_summary[[r]]$desc <- temprow$data[[1]] %>%
dplyr::select_(as.name(temprow$predictor)) %>%
unlist %>%
summary_sd
x_summary[[r]]$desc_byclass <-
split(temprow$data[[1]], temprow$data[[1]][, temprow$outcome]) %>%
purrr::map(function(x) {
dat <- x[, temprow$predictor]
dat <- unlist(dat)
summary_sd(dat)
})
x_summary[[r]]$desc_byclass <- data.frame(do.call(rbind, x_summary[[r]]$desc_byclass))
colnames(x_summary[[r]]$desc_byclass) <- c("Min.", "5%", "1st Qu.", "Median",
"Mean", "3rd Qu.", "95%", "Max", "SD")
x_summary[[r]]$n_obs <- nrow(temprow$data[[1]])
x_summary[[r]]$n_pos <- temprow$data[[1]] %>%
dplyr::select_(as.name(temprow$outcome)) %>%
unlist %>% (function(x) sum(x == temprow$pos_class))
x_summary[[r]]$n_neg <- x_summary[[r]]$n_obs - x_summary[[r]]$n_pos
# Confusion Matrix
oi <- get_opt_ind(temprow$roc_curve[[1]],
oc = unlist(temprow$optimal_cutpoint),
direction = temprow$direction)
x_summary[[r]]$confusion_matrix <- data.frame(
cutpoint = unlist(temprow$optimal_cutpoint),
temprow$roc_curve[[1]][oi, c("tp", "fn", "fp", "tn")]
)
if (has_boot_results(temprow)) {
x_summary[[r]][["boot"]] <- purrr::map(temprow[["boot"]][[1]][, 1:13], function(x) {
round(summary_sd(x), 4)
})
x_summary[[r]][["boot"]] <- do.call(rbind, x_summary[[r]][["boot"]])
x_summary[[r]][["boot"]] <- as.data.frame(x_summary[[r]][["boot"]])
x_summary[[r]][["boot"]] <- tibble::rownames_to_column(x_summary[[r]][["boot"]],
var = "Variable")
x_summary[[r]]$boot_runs <- nrow(temprow[["boot"]][[1]])
}
}
x_summary <- purrr::map_df(x_summary, tidy_summary)
class(x_summary) <- c("summary_cutpointr", class(x_summary))
return(x_summary)
}
functio(results)
summary(results)
summary(results)$confusionMatrix
x = summary(results)
results$roc_curve
results$roc_curve$tp
results$roc_curve["tp"]
results$roc_curve[["tp"]]
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
x
x <- list(a = results, b = results)
x[[a]]
x[["a"]]
x[["a"]]$optimal_cutpoint
jmvtools::install()
jmvtools::install()
jmvtools::install()
print.sensSpecTable <- function(TP, FP, TN, FN){
res <- paste0(
"<style type='text/css'>
.tg  {border-collapse:collapse;border-spacing:0;border-width:1px;border-style:solid;border-color:black;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}
.tg .tg-s6z2{text-align:center}
.tg .tg-uys7{border-color:inherit;text-align:center}
.tg .tg-h0x1{text-align:center}
</style>
<table class='tg'>
<tr>
<th class='tg-0lax' colspan='4'>TITLE</th>
</tr>
<tr>
<td class='tg-s6z2'></td>
<td class='tg-uys7' colspan='3'>DECISION BASED ON MEASURE</td>
</tr>
<tr>
<td class='tg-h0x1' rowspan='3'>CRITERION</td>
<td class='tg-h0x1'></td>
<td class='tg-h0x1'>Negative</td>
<td class='tg-h0x1'>Positive</td>
</tr>
<tr>
<td class='tg-s6z2'>Negative</td>
<td class='tg-s6z2'>",TN," (TN)</td>
<td class='tg-s6z2'>", FP," (FP)</td>
</tr>
<tr>
<td class='tg-h0x1'>Positive</td>
<td class='tg-h0x1'>", FN," (FN)</td>
<td class='tg-h0x1'>", TP," (TP)</td>
</tr>
</table>")
return(res)
}
print.sensSpecTable(50,50,50,50)
jmvtools::install()
jmvtools::install()
print.sensSpecTable(50,50,50,50)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
results$roc_curve
results$roc_curve$fp
results$roc_curve["fp"]
results$roc_curve[[1]]
jmvtools::install()
results$roc_curve[[1]]$x.sorted
jmvtools::install()
results$roc_curve
results
confusionMatrix = results$roc_curve[[1]]
length(confusionMatrix)
confusionMatrix
confusionMatrix[[10]]
confusionMatrix = results$roc_curve[[1]]
list <- list(tp = confusionMatrix$tp,
fp = confusionMatrix$fp,
tn = confusionMatrix$tn,
fn = confusionMatrix$fn)
list
resList <- list(tp = confusionMatrix$tp,
fp = confusionMatrix$fp,
tn = confusionMatrix$tn,
fn = confusionMatrix$fn)
sensitivity(resList)
sensitivity(tp = confusionMatrix$tp,
fp = confusionMatrix$fp,
tn = confusionMatrix$tn,
fn = confusionMatrix$fn)
sensList <- cutpointr::sensitivity(tp = confusionMatrix$tp,
fp = confusionMatrix$fp,
tn = confusionMatrix$tn,
fn = confusionMatrix$fn)
specList <- cutpointr::specificity(tp = confusionMatrix$tp,
fp = confusionMatrix$fp,
tn = confusionMatrix$tn,
fn = confusionMatrix$fn)
ppvList <- cutpointr::ppv(tp = confusionMatrix$tp,
fp = confusionMatrix$fp,
tn = confusionMatrix$tn,
fn = confusionMatrix$fn)
npvList <- cutpointr::npv(tp = confusionMatrix$tp,
fp = confusionMatrix$fp,
tn = confusionMatrix$tn,
fn = confusionMatrix$fn)
youdenList <- cutpointr::youden(tp = confusionMatrix$tp,
fp = confusionMatrix$fp,
tn = confusionMatrix$tn,
fn = confusionMatrix$fn)
resultsToReturn <- cbind(cutpoint = confusionMatrix$x.sorted,
sensitivity = sensList,
specificity = specList,
ppv = ppvList,
npv = npvList,
AUC = results$AUC,
youden = youdenList)
resultsToReturn
length(youdenList)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
depdendentVar = "Feck"
jmvtools::install()
paste0(dependentVar, youdenList)
paste0("feck", youdenList)
resultsToReturn[1,]
jmvtools::install()
resultsToReturn[1,]
length(resultsToReturn)
resultsToReturn
nrow(resultsToReturn)
jmvtools::install()
jmvtools::install()
library(ggplot)
plot(results)
library(ggplot2)
View(resultsToReturn)
data.frame(resultsToReturn)
ggplot(data.frame(resultsToReturn), aes(x = sensitivity, y = specificity)) +
geom_point()
ggplot(data.frame(resultsToReturn), aes(x = specificity, y = sensitivity)) +
geom_point()
cutpointr::plot_roc(results)
ggplot(data.frame(resultsToReturn), aes(x = 1 - specificity, y = sensitivity)) +
geom_point()
ggplot(data.frame(resultsToReturn), aes(x = 1 - specificity, y = sensitivity)) +
geom_point() +
geom_line()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
?format
?format
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
sensList <-
(cutpointr::sensitivity(
tp = confusionMatrix$tp,
fp = confusionMatrix$fp,
tn = confusionMatrix$tn,
fn = confusionMatrix$fn
) * 100)
sensList
jmvtools::install()
jmvtools::install()
jmvtools::install()
results$optimal_cutpoint
unlist(results$optimal_cutpoint)
typeof(unlist(results$optimal_cutpoint))
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
confusionMatrix
resultsToReturn
resultsToReturn
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
results$optimal_cutpoint
x <- results$optimal_cutpoint
nrow(x)
jmvtools::install()
x <- 10
sort(x)
x <- list(10)
sort(x)
x <- list(10)
jmvtools::install()
typeof(results$optimal_cutpoint)
typeof(results$optimal_cutpoint)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
resultsMulti <- cutpointr::multi_cutpointr(data = data, x = c("bditot", "hdstot15"), class = "scidmdd")
resultsMulti <- cutpointr::multi_cutpointr(data = data, x = c("bditot", "hdstot15"), class = "scidmdd", na.rm = TRUE)
results
resultsMulti
View(resultsMulti)
jmvtools::install()
?delong.paired.test
??delong.paired.test
?cutpointr::cutpointr()
